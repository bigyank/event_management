package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"kraneapi/graph/model"
	handler "kraneapi/pkg/api/handlers"
)

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, input model.AddUserInput) (*model.User, error) {
	return handler.AddUser(ctx, input)
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.AddEventInput) (*model.Event, error) {
	return handler.CreateEvent(ctx, input)
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, input model.UpdateEventInput) (*model.Event, error) {
	return handler.UpdateEvent(ctx, input)
}

// CreateEventOrganizer is the resolver for the createEventOrganizer field.
func (r *mutationResolver) CreateEventOrganizer(ctx context.Context, input model.CreateEventOrganizerInput) (*model.EventOrganizer, error) {
	return handler.CreateEventOrganizer(ctx, input)
}

// UpdateEventOrganizer is the resolver for the updateEventOrganizer field.
func (r *mutationResolver) UpdateEventOrganizer(ctx context.Context, input model.UpdateEventOrganizerInput) (*model.EventOrganizer, error) {
	return handler.UpdateEventOrganizer(ctx, input)
}

// CreateEventSession is the resolver for the createEventSession field.
func (r *mutationResolver) CreateEventSession(ctx context.Context, input model.CreateEventSessionInput) (*model.EventSession, error) {
	return handler.CreateEventSession(ctx, input)
}

// UpdateEventSession is the resolver for the updateEventSession field.
func (r *mutationResolver) UpdateEventSession(ctx context.Context, input model.UpdateEventSessionInput) (*model.EventSession, error) {
	return handler.UpdateEventSession(ctx, input)
}

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.CreateExpenseInput) (*model.Expense, error) {
	return handler.CreateExpense(ctx, input)
}

// UpdateExpense is the resolver for the updateExpense field.
func (r *mutationResolver) UpdateExpense(ctx context.Context, input model.UpdateExpenseInput) (*model.Expense, error) {
	return handler.UpdateExpense(ctx, input)
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	return handler.GetUsers(ctx)
}

// GetUserByID is the resolver for the getUserByID field.
func (r *queryResolver) GetUserByID(ctx context.Context, input model.UserIDInput) (*model.User, error) {
	return handler.GetUserByID(ctx, input)
}

// GetAllEventSessions is the resolver for the getAllEventSessions field.
func (r *queryResolver) GetAllEventSessions(ctx context.Context, eventID string) ([]*model.EventSession, error) {
	return handler.GetAllEventSessions(ctx, eventID)
}

// GetAllEventExpenses is the resolver for the getAllEventExpenses field.
func (r *queryResolver) GetAllEventExpenses(ctx context.Context, eventID string) ([]*model.Expense, error) {
	return handler.GetAllEventExpenses(ctx, eventID)
}

// GetEventExpensesBreakdown is the resolver for the getEventExpensesBreakdown field.
func (r *queryResolver) GetEventExpensesBreakdown(ctx context.Context, eventID string) ([]*model.ExpenseCategoryBreakdown, error) {
	return handler.GetEventExpensesBreakdown(ctx, eventID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddEventInput struct {
	EventName   string `json:"eventName"`
	StartDate   string `json:"startDate"`
	EndDate     string `json:"endDate"`
	Location    string `json:"location"`
	Description string `json:"description"`
}

type AddUserInput struct {
	Name        string `json:"name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
}

type CreateEventOrganizerInput struct {
	EventID string `json:"eventID"`
	UserID  string `json:"userID"`
	Role    Role   `json:"role"`
}

type CreateEventSessionInput struct {
	EventID     string `json:"eventID"`
	SessionName string `json:"sessionName"`
	StartTime   string `json:"startTime"`
	EndTime     string `json:"endTime"`
}

type CreateExpenseInput struct {
	EventID     string          `json:"eventID"`
	ItemName    string          `json:"itemName"`
	Cost        float64         `json:"cost"`
	Description string          `json:"description"`
	Category    ExpenseCategory `json:"category"`
}

type Event struct {
	ID          string `json:"id"`
	EventName   string `json:"eventName"`
	StartDate   string `json:"startDate"`
	EndDate     string `json:"endDate"`
	Location    string `json:"location"`
	Description string `json:"description"`
}

type EventOrganizer struct {
	EventOrganizerID string `json:"eventOrganizerID"`
	EventID          string `json:"eventID"`
	UserID           string `json:"userID"`
	Role             Role   `json:"role"`
}

type EventSession struct {
	SessionID   string `json:"sessionID"`
	EventID     string `json:"eventID"`
	SessionName string `json:"sessionName"`
	StartTime   string `json:"startTime"`
	EndTime     string `json:"endTime"`
}

type Expense struct {
	ExpenseID   string          `json:"expenseID"`
	EventID     string          `json:"eventID"`
	ItemName    string          `json:"itemName"`
	Cost        float64         `json:"cost"`
	Description string          `json:"description"`
	Category    ExpenseCategory `json:"category"`
}

type ExpenseCategoryBreakdown struct {
	Category  ExpenseCategory `json:"category"`
	TotalCost float64         `json:"totalCost"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateEventInput struct {
	ID          string `json:"id"`
	EventName   string `json:"eventName"`
	StartDate   string `json:"startDate"`
	EndDate     string `json:"endDate"`
	Location    string `json:"location"`
	Description string `json:"description"`
}

type UpdateEventOrganizerInput struct {
	EventID string `json:"eventId"`
	UserID  string `json:"userId"`
	Role    Role   `json:"role"`
}

type UpdateEventSessionInput struct {
	SessionID   string `json:"sessionID"`
	EventID     string `json:"eventID"`
	SessionName string `json:"sessionName"`
	StartTime   string `json:"startTime"`
	EndTime     string `json:"endTime"`
}

type UpdateExpenseInput struct {
	ExpenseID   string          `json:"expenseID"`
	EventID     string          `json:"eventId"`
	ItemName    string          `json:"itemName"`
	Cost        float64         `json:"cost"`
	Description string          `json:"description"`
	Category    ExpenseCategory `json:"category"`
}

type User struct {
	UserID      string `json:"userID"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
}

type UserIDInput struct {
	ID string `json:"id"`
}

type ExpenseCategory string

const (
	ExpenseCategoryVenue       ExpenseCategory = "VENUE"
	ExpenseCategoryCatering    ExpenseCategory = "CATERING"
	ExpenseCategoryDecorations ExpenseCategory = "DECORATIONS"
	ExpenseCategoryOther       ExpenseCategory = "OTHER"
)

var AllExpenseCategory = []ExpenseCategory{
	ExpenseCategoryVenue,
	ExpenseCategoryCatering,
	ExpenseCategoryDecorations,
	ExpenseCategoryOther,
}

func (e ExpenseCategory) IsValid() bool {
	switch e {
	case ExpenseCategoryVenue, ExpenseCategoryCatering, ExpenseCategoryDecorations, ExpenseCategoryOther:
		return true
	}
	return false
}

func (e ExpenseCategory) String() string {
	return string(e)
}

func (e *ExpenseCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExpenseCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExpenseCategory", str)
	}
	return nil
}

func (e ExpenseCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin       Role = "ADMIN"
	RoleContributor Role = "CONTRIBUTOR"
	RoleAttendee    Role = "ATTENDEE"
)

var AllRole = []Role{
	RoleAdmin,
	RoleContributor,
	RoleAttendee,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleContributor, RoleAttendee:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
